import { EntityData, LevelData } from './EditorApp.js';
export declare class LevelCanvas {
    private canvas;
    private ctx;
    private level;
    private gridSize;
    private zoom;
    private panX;
    private panY;
    private isDragging;
    private lastMouseX;
    private lastMouseY;
    private currentTool;
    private selectedTile;
    private selectedEntity;
    onTileClick: ((x: number, y: number) => void) | null;
    onEntityClick: ((entity: EntityData) => void) | null;
    onEntityPlace: ((x: number, y: number) => void) | null;
    constructor(canvas: HTMLCanvasElement);
    private setupCanvas;
    private setupEventListeners;
    private handleMouseDown;
    private handleMouseMove;
    private handleMouseUp;
    private handleWheel;
    private handleTouchStart;
    private handleTouchMove;
    private handleTouchEnd;
    private handleResize;
    private handleLeftClick;
    private updateCursor;
    private screenToGrid;
    private gridToScreen;
    render(): void;
    private drawTile;
    private drawEntity;
    private drawGrid;
    private drawSelectionOverlay;
    private getMousePosition;
    private getTileColor;
    private getEntityColor;
    private getEntityIcon;
    loadLevel(level: LevelData): void;
    setTile(x: number, y: number, tile: string): void;
    addEntity(entity: EntityData): void;
    updateEntity(entity: EntityData): void;
    removeEntity(entityId: string): void;
    setTool(tool: string): void;
    setSelectedTile(tile: string): void;
    setSelectedEntity(entity: string): void;
    zoomIn(): void;
    zoomOut(): void;
    zoomReset(): void;
    getZoom(): number;
    getGridSize(): number;
}
//# sourceMappingURL=LevelCanvas.d.ts.map